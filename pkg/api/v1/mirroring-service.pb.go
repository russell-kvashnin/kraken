// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mirroring-service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MirroringRequest struct {
	ShortUrl             string   `protobuf:"bytes,1,opt,name=shortUrl,proto3" json:"shortUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MirroringRequest) Reset()         { *m = MirroringRequest{} }
func (m *MirroringRequest) String() string { return proto.CompactTextString(m) }
func (*MirroringRequest) ProtoMessage()    {}
func (*MirroringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec8fbf3a902f910, []int{0}
}

func (m *MirroringRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MirroringRequest.Unmarshal(m, b)
}
func (m *MirroringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MirroringRequest.Marshal(b, m, deterministic)
}
func (m *MirroringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MirroringRequest.Merge(m, src)
}
func (m *MirroringRequest) XXX_Size() int {
	return xxx_messageInfo_MirroringRequest.Size(m)
}
func (m *MirroringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MirroringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MirroringRequest proto.InternalMessageInfo

func (m *MirroringRequest) GetShortUrl() string {
	if m != nil {
		return m.ShortUrl
	}
	return ""
}

type FileChunk struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec8fbf3a902f910, []int{1}
}

func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunk.Unmarshal(m, b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return xxx_messageInfo_FileChunk.Size(m)
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MirroringRequest)(nil), "v1.MirroringRequest")
	proto.RegisterType((*FileChunk)(nil), "v1.FileChunk")
}

func init() { proto.RegisterFile("mirroring-service.proto", fileDescriptor_cec8fbf3a902f910) }

var fileDescriptor_cec8fbf3a902f910 = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0xcd, 0x2c, 0x2a,
	0xca, 0x2f, 0xca, 0xcc, 0x4b, 0xd7, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x33, 0x54, 0xd2, 0xe3, 0x12, 0xf0, 0x85, 0x49, 0x07, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x71, 0x71, 0x14, 0x67, 0xe4, 0x17, 0x95, 0x84, 0x16,
	0xe5, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xf9, 0x4a, 0xf2, 0x5c, 0x9c, 0x6e, 0x99,
	0x39, 0xa9, 0xce, 0x19, 0xa5, 0x79, 0xd9, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0x89, 0x25, 0x89, 0x60,
	0x45, 0x3c, 0x41, 0x60, 0xb6, 0x91, 0x0b, 0x17, 0x2f, 0x48, 0x01, 0xdc, 0x50, 0x21, 0x63, 0x2e,
	0x0e, 0x97, 0xfc, 0xf2, 0xbc, 0x9c, 0xfc, 0xc4, 0x14, 0x21, 0x11, 0xbd, 0x32, 0x43, 0x3d, 0x74,
	0xfb, 0xa4, 0x78, 0x41, 0xa2, 0x70, 0x53, 0x95, 0x18, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x2e, 0x34,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xf3, 0x52, 0x81, 0xbc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileMirroringClient is the client API for FileMirroring service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileMirroringClient interface {
	Download(ctx context.Context, in *MirroringRequest, opts ...grpc.CallOption) (FileMirroring_DownloadClient, error)
}

type fileMirroringClient struct {
	cc *grpc.ClientConn
}

func NewFileMirroringClient(cc *grpc.ClientConn) FileMirroringClient {
	return &fileMirroringClient{cc}
}

func (c *fileMirroringClient) Download(ctx context.Context, in *MirroringRequest, opts ...grpc.CallOption) (FileMirroring_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileMirroring_serviceDesc.Streams[0], "/v1.FileMirroring/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileMirroringDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileMirroring_DownloadClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type fileMirroringDownloadClient struct {
	grpc.ClientStream
}

func (x *fileMirroringDownloadClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileMirroringServer is the server API for FileMirroring service.
type FileMirroringServer interface {
	Download(*MirroringRequest, FileMirroring_DownloadServer) error
}

func RegisterFileMirroringServer(s *grpc.Server, srv FileMirroringServer) {
	s.RegisterService(&_FileMirroring_serviceDesc, srv)
}

func _FileMirroring_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MirroringRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileMirroringServer).Download(m, &fileMirroringDownloadServer{stream})
}

type FileMirroring_DownloadServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type fileMirroringDownloadServer struct {
	grpc.ServerStream
}

func (x *fileMirroringDownloadServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _FileMirroring_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FileMirroring",
	HandlerType: (*FileMirroringServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _FileMirroring_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mirroring-service.proto",
}
